{"version":3,"sources":["./src/app/dashboard/dashboard.module.ts","./src/app/dashboard/shared/widgets.service.ts","./src/app/dashboard/components/widgets/card-progressbar.component.ts","./src/app/dashboard/components/widgets/card-progressbar.component.html","./src/app/dashboard/components/widgets/table.component.ts","./src/app/dashboard/components/widgets/table.component.html","./src/app/dashboard/components/dashboard.component.html","./src/app/dashboard/dashboard-routing.module.ts","./node_modules/ngx-bootstrap/buttons/fesm5/ngx-bootstrap-buttons.js"],"names":["isCard","type","getCardBgColor","widget","backgroundGradient","backgroundColor","getCardProgressbarColor","progressbarBackgroundGradient","progressbarBackgroundColor","widgetsService","ButtonsModule","forRoot","ngModule","providers"],"mappings":"oHAcA,aAa+B,OAb/B,gB,wBCXA,2BA0BA,OAvBS,YAAAA,OAAP,SAAcC,GAEZ,MAAY,qBAATA,GAME,YAAAC,eAAP,SAAsBC,GAEpB,OAAGA,EAAOC,mBACDD,EAAOC,mBAERD,EAAOE,iBAGV,YAAAC,wBAAP,SAA+BH,GAE7B,OAAGA,EAAOI,8BACDJ,EAAOI,8BAETJ,EAAOK,4BAElB,EA1BA,GCCA,aAUA,OADE,SAAmBC,GAAA,KAAAA,kBATrB,G,8FCJA,4JAEE,mGAA2B,uCAC3B,0EAAK,4GACL,+GACE,yPAMF,0FAA4C,4GAAiC,sCAX/E,QAAuB,EAA4B,aAC9C,kCAA0D,QAAC,EAA6C,wBAChF,wBACtB,4EAEH,QAA6C,gCACxC,EAAgD,0BAChD,2CAAmE,QACnE,EAAwD,mCAG/D,QAAO,EAAoC,sBAAC,oF,wCCP9C,aAUA,OADE,SAAmBA,GAAA,KAAAA,kBATrB,G,8FCCM,yEAA0C,qN,wCAK1C,mI,MAAA,c,2HAA6D,oBAA7D,QAA2B,EAAgB,sB,wCAD7C,yEACE,iLAA6D,cAA7D,QAAI,EAAsB,2B,wCAVhC,iGAAyB,4GACzB,+FACE,iHACE,4EACA,yEACE,gLAGF,4EACA,kLAAoC,gCAJlC,QAAI,EAAqC,gBAI3C,SAAI,EAA+B,gDATd,gF,sICInB,0FACE,6LAA+C,cAA/C,QAA6B,EAAiB,kC,wCAEhD,0FACE,kLAAoC,cAApC,QAAkB,EAAiB,kC,wCANvC,+MAAoC,wDAApC,6EAEE,wLAGA,yLAA0C,gCALR,uFAAuH,yBAA3J,QAAoC,GAApC,QACK,EAAwB,wBAC3B,QAAkB,oBAGlB,QAAkB,WAAuB,M,wCAP/C,qGACE,yFACE,iLAC8B,cAD9B,QAC8B,YADK,iB,+UCUvC,aAIqC,OAJrC,gB,wBCscIC,EAA+B,WAC/B,SAASA,KAiBT,OAZAA,EAAcC,QAGd,WACI,MAAO,CAAEC,SAAUF,EAAeG,UAAW,KAQ1CH,EAlBuB,G","file":"6.0a00f845b31f24ee82c0.js","sourcesContent":["import { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { ChartsModule } from 'ng2-charts';\nimport { BsDropdownModule } from 'ngx-bootstrap/dropdown';\nimport { ButtonsModule } from 'ngx-bootstrap/buttons';\nimport { DirectivesModule } from \"../core/directives/directives.module\";\n\nimport { DashboardComponent } from './components/dashboard.component';\nimport { CardProgressbarComponent } from './components/widgets/card-progressbar.component';\nimport { TableComponent } from './components/widgets/table.component';\nimport { DashboardRoutingModule } from './dashboard-routing.module';\nimport { CommonModule } from '@angular/common';\nimport { TranslocoModule } from '@ngneat/transloco';\n\n@NgModule({\n  imports: [\n    FormsModule,\n    DashboardRoutingModule,\n    ChartsModule,\n    BsDropdownModule,\n    ButtonsModule.forRoot(),\n    CommonModule,\n    TranslocoModule,\n    DirectivesModule\n  ],\n  declarations: [ DashboardComponent, CardProgressbarComponent, TableComponent ]\n})\nexport class DashboardModule { }\n","import { Injectable } from '@angular/core';\nimport { CardWidget } from './widgets/_card';\n\n@Injectable()\nexport class WidgetsService\n{\n  public isCard(type: string)\n  {\n    if(type === 'card-progressbar') {\n      return true\n    }\n    return false\n  }\n\n  public getCardBgColor(widget: CardWidget): string\n  {\n    if(widget.backgroundGradient) {\n      return widget.backgroundGradient\n    }\n     return widget.backgroundColor\n  }\n\n  public getCardProgressbarColor(widget: CardWidget): string\n  {\n    if(widget.progressbarBackgroundGradient) {\n      return widget.progressbarBackgroundGradient\n    }\n    return widget.progressbarBackgroundColor;\n  }\n}\n","import { Component, Input } from '@angular/core';\nimport { CardWidget } from '../../shared/widgets/_card';\nimport { WidgetsService } from '../../shared/widgets.service';\n\n@Component({\n  templateUrl: 'card-progressbar.component.html',\n  selector: 'app-card-progressbar-widget',\n  providers: [WidgetsService]\n})\nexport class CardProgressbarComponent {\n\n  @Input() widget: CardWidget;\n\n  constructor(public widgetsService: WidgetsService) {}\n}\n","<div class=\"card-body\" [style.color]=\"widget.color\"\n     [style.background]=\"widgetsService.getCardBgColor(widget)\" [style.border-color]=\"widget.backgroundColor\">\n  <div class=\"text-value-lg\">{{ widget.value }}</div>\n  <div>{{ widget.text | transloco }}</div>\n  <div class=\"progress progress-xs my-2\">\n    <div class=\"progress-bar\" role=\"progressbar\" [style.width]=\"widget.progressbarPercent + '%'\"\n         [attr.aria-valuenow]=\"widget.progressbarPercent\" aria-valuemin=\"0\" aria-valuemax=\"100\"\n         [style.background]=\"widgetsService.getCardProgressbarColor(widget)\"\n         [style.border-color]=\"widget.progressbarBackgroundColor\">\n    </div>\n  </div>\n  <small [style.color]=\"widget.helpTextColor\">{{ widget.helpText | transloco }}</small>\n</div>\n","import { Component, Input } from '@angular/core';\nimport { TableWidget } from '../../shared/widgets/_table';\nimport { WidgetsService } from '../../shared/widgets.service';\n\n@Component({\n  templateUrl: 'table.component.html',\n  selector: 'app-table-widget',\n  providers: [WidgetsService]\n})\nexport class TableComponent {\n\n  @Input() widget: TableWidget;\n\n  constructor(public widgetsService: WidgetsService) {}\n}\n","<div class=\"card-header\">{{ widget.title | transloco }}</div>\n<div class=\"card-body\">\n  <table class=\"table table-responsive-sm\">\n    <thead>\n    <tr>\n      <th *ngFor=\"let header of widget.headers\">{{ header | transloco }}</th>\n    </tr>\n    </thead>\n    <tbody>\n    <tr *ngFor=\"let row of widget.data\">\n      <td *ngFor=\"let td of row\" [innerHTML]=\"td\" routeTransformer></td>\n    </tr>\n    </tbody>\n  </table>\n</div>\n","<div class=\"animated fadeIn\">\n  <div class=\"row\">\n    <div *ngFor=\"let widget of widgets\" [ngClass]=\"{'col-sm-6 col-lg-3': widgetsService.isCard(widget.type), 'col-sm-12': !widgetsService.isCard(widget.type)}\"\n         [ngSwitch]=\"widget.type\">\n      <div class=\"card\" *ngSwitchCase=\"'card-progressbar'\">\n        <app-card-progressbar-widget [widget]=\"widget\"></app-card-progressbar-widget>\n      </div>\n      <div class=\"card\" *ngSwitchCase=\"'table'\">\n        <app-table-widget [widget]=\"widget\"></app-table-widget>\n      </div>\n    </div>\n  </div>\n</div>\n","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { DashboardComponent } from './components/dashboard.component';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: DashboardComponent\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class DashboardRoutingModule {}\n","import { forwardRef, Directive, Input, HostBinding, HostListener, ChangeDetectorRef, ElementRef, Optional, Renderer2, NgModule } from '@angular/core';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n// TODO: config: activeClass - Class to apply to the checked buttons\n/** @type {?} */\nvar CHECKBOX_CONTROL_VALUE_ACCESSOR = {\n    provide: NG_VALUE_ACCESSOR,\n    /* tslint:disable-next-line: no-use-before-declare */\n    useExisting: forwardRef((/**\n     * @return {?}\n     */\n    function () { return ButtonCheckboxDirective; })),\n    multi: true\n};\n/**\n * Add checkbox functionality to any element\n */\nvar ButtonCheckboxDirective = /** @class */ (function () {\n    function ButtonCheckboxDirective() {\n        /**\n         * Truthy value, will be set to ngModel\n         */\n        this.btnCheckboxTrue = true;\n        /**\n         * Falsy value, will be set to ngModel\n         */\n        this.btnCheckboxFalse = false;\n        this.state = false;\n        this.onChange = Function.prototype;\n        this.onTouched = Function.prototype;\n    }\n    // view -> model\n    // view -> model\n    /**\n     * @return {?}\n     */\n    ButtonCheckboxDirective.prototype.onClick = \n    // view -> model\n    /**\n     * @return {?}\n     */\n    function () {\n        if (this.isDisabled) {\n            return;\n        }\n        this.toggle(!this.state);\n        this.onChange(this.value);\n    };\n    /**\n     * @return {?}\n     */\n    ButtonCheckboxDirective.prototype.ngOnInit = /**\n     * @return {?}\n     */\n    function () {\n        this.toggle(this.trueValue === this.value);\n    };\n    Object.defineProperty(ButtonCheckboxDirective.prototype, \"trueValue\", {\n        get: /**\n         * @protected\n         * @return {?}\n         */\n        function () {\n            return typeof this.btnCheckboxTrue !== 'undefined'\n                ? this.btnCheckboxTrue\n                : true;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ButtonCheckboxDirective.prototype, \"falseValue\", {\n        get: /**\n         * @protected\n         * @return {?}\n         */\n        function () {\n            return typeof this.btnCheckboxFalse !== 'undefined'\n                ? this.btnCheckboxFalse\n                : false;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @param {?} state\n     * @return {?}\n     */\n    ButtonCheckboxDirective.prototype.toggle = /**\n     * @param {?} state\n     * @return {?}\n     */\n    function (state) {\n        this.state = state;\n        this.value = this.state ? this.trueValue : this.falseValue;\n    };\n    // ControlValueAccessor\n    // model -> view\n    // ControlValueAccessor\n    // model -> view\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    ButtonCheckboxDirective.prototype.writeValue = \n    // ControlValueAccessor\n    // model -> view\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    function (value) {\n        this.state = this.trueValue === value;\n        this.value = value ? this.trueValue : this.falseValue;\n    };\n    /**\n     * @param {?} isDisabled\n     * @return {?}\n     */\n    ButtonCheckboxDirective.prototype.setDisabledState = /**\n     * @param {?} isDisabled\n     * @return {?}\n     */\n    function (isDisabled) {\n        this.isDisabled = isDisabled;\n    };\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    ButtonCheckboxDirective.prototype.registerOnChange = /**\n     * @param {?} fn\n     * @return {?}\n     */\n    function (fn) {\n        this.onChange = fn;\n    };\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    ButtonCheckboxDirective.prototype.registerOnTouched = /**\n     * @param {?} fn\n     * @return {?}\n     */\n    function (fn) {\n        this.onTouched = fn;\n    };\n    ButtonCheckboxDirective.decorators = [\n        { type: Directive, args: [{\n                    selector: '[btnCheckbox]',\n                    providers: [CHECKBOX_CONTROL_VALUE_ACCESSOR]\n                },] }\n    ];\n    ButtonCheckboxDirective.propDecorators = {\n        btnCheckboxTrue: [{ type: Input }],\n        btnCheckboxFalse: [{ type: Input }],\n        state: [{ type: HostBinding, args: ['class.active',] }, { type: HostBinding, args: ['attr.aria-pressed',] }],\n        onClick: [{ type: HostListener, args: ['click',] }]\n    };\n    return ButtonCheckboxDirective;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nvar RADIO_CONTROL_VALUE_ACCESSOR = {\n    provide: NG_VALUE_ACCESSOR,\n    /* tslint:disable-next-line: no-use-before-declare */\n    useExisting: forwardRef((/**\n     * @return {?}\n     */\n    function () { return ButtonRadioGroupDirective; })),\n    multi: true\n};\n/**\n * A group of radio buttons.\n * A value of a selected button is bound to a variable specified via ngModel.\n */\nvar ButtonRadioGroupDirective = /** @class */ (function () {\n    function ButtonRadioGroupDirective(cdr) {\n        this.cdr = cdr;\n        this.onChange = Function.prototype;\n        this.onTouched = Function.prototype;\n    }\n    Object.defineProperty(ButtonRadioGroupDirective.prototype, \"value\", {\n        get: /**\n         * @return {?}\n         */\n        function () {\n            return this._value;\n        },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */\n        function (value) {\n            this._value = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    ButtonRadioGroupDirective.prototype.writeValue = /**\n     * @param {?} value\n     * @return {?}\n     */\n    function (value) {\n        this._value = value;\n        this.cdr.markForCheck();\n    };\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    ButtonRadioGroupDirective.prototype.registerOnChange = /**\n     * @param {?} fn\n     * @return {?}\n     */\n    function (fn) {\n        this.onChange = fn;\n    };\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    ButtonRadioGroupDirective.prototype.registerOnTouched = /**\n     * @param {?} fn\n     * @return {?}\n     */\n    function (fn) {\n        this.onTouched = fn;\n    };\n    ButtonRadioGroupDirective.decorators = [\n        { type: Directive, args: [{\n                    selector: '[btnRadioGroup]',\n                    providers: [RADIO_CONTROL_VALUE_ACCESSOR]\n                },] }\n    ];\n    /** @nocollapse */\n    ButtonRadioGroupDirective.ctorParameters = function () { return [\n        { type: ChangeDetectorRef }\n    ]; };\n    return ButtonRadioGroupDirective;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nvar RADIO_CONTROL_VALUE_ACCESSOR$1 = {\n    provide: NG_VALUE_ACCESSOR,\n    /* tslint:disable-next-line: no-use-before-declare */\n    useExisting: forwardRef((/**\n     * @return {?}\n     */\n    function () { return ButtonRadioDirective; })),\n    multi: true\n};\n/**\n * Create radio buttons or groups of buttons.\n * A value of a selected button is bound to a variable specified via ngModel.\n */\nvar ButtonRadioDirective = /** @class */ (function () {\n    function ButtonRadioDirective(el, cdr, group, renderer) {\n        this.el = el;\n        this.cdr = cdr;\n        this.group = group;\n        this.renderer = renderer;\n        this.onChange = Function.prototype;\n        this.onTouched = Function.prototype;\n    }\n    Object.defineProperty(ButtonRadioDirective.prototype, \"value\", {\n        /** Current value of radio component or group */\n        get: /**\n         * Current value of radio component or group\n         * @return {?}\n         */\n        function () {\n            return this.group ? this.group.value : this._value;\n        },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */\n        function (value) {\n            if (this.group) {\n                this.group.value = value;\n                return;\n            }\n            this._value = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ButtonRadioDirective.prototype, \"disabled\", {\n        /** If `true` — radio button is disabled */\n        get: /**\n         * If `true` — radio button is disabled\n         * @return {?}\n         */\n        function () {\n            return this._disabled;\n        },\n        set: /**\n         * @param {?} disabled\n         * @return {?}\n         */\n        function (disabled) {\n            this._disabled = disabled;\n            this.setDisabledState(disabled);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ButtonRadioDirective.prototype, \"isActive\", {\n        get: /**\n         * @return {?}\n         */\n        function () {\n            return this.btnRadio === this.value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @return {?}\n     */\n    ButtonRadioDirective.prototype.onClick = /**\n     * @return {?}\n     */\n    function () {\n        if (this.el.nativeElement.attributes.disabled || !this.uncheckable && this.btnRadio === this.value) {\n            return;\n        }\n        this.value = this.uncheckable && this.btnRadio === this.value ? undefined : this.btnRadio;\n        this._onChange(this.value);\n    };\n    /**\n     * @return {?}\n     */\n    ButtonRadioDirective.prototype.ngOnInit = /**\n     * @return {?}\n     */\n    function () {\n        this.uncheckable = typeof this.uncheckable !== 'undefined';\n    };\n    /**\n     * @return {?}\n     */\n    ButtonRadioDirective.prototype.onBlur = /**\n     * @return {?}\n     */\n    function () {\n        this.onTouched();\n    };\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    ButtonRadioDirective.prototype._onChange = /**\n     * @param {?} value\n     * @return {?}\n     */\n    function (value) {\n        if (this.group) {\n            this.group.onTouched();\n            this.group.onChange(value);\n            return;\n        }\n        this.onTouched();\n        this.onChange(value);\n    };\n    // ControlValueAccessor\n    // model -> view\n    // ControlValueAccessor\n    // model -> view\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    ButtonRadioDirective.prototype.writeValue = \n    // ControlValueAccessor\n    // model -> view\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    function (value) {\n        this.value = value;\n        this.cdr.markForCheck();\n    };\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    ButtonRadioDirective.prototype.registerOnChange = /**\n     * @param {?} fn\n     * @return {?}\n     */\n    function (fn) {\n        this.onChange = fn;\n    };\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    ButtonRadioDirective.prototype.registerOnTouched = /**\n     * @param {?} fn\n     * @return {?}\n     */\n    function (fn) {\n        this.onTouched = fn;\n    };\n    /**\n     * @param {?} disabled\n     * @return {?}\n     */\n    ButtonRadioDirective.prototype.setDisabledState = /**\n     * @param {?} disabled\n     * @return {?}\n     */\n    function (disabled) {\n        if (disabled) {\n            this.renderer.setAttribute(this.el.nativeElement, 'disabled', 'disabled');\n            return;\n        }\n        this.renderer.removeAttribute(this.el.nativeElement, 'disabled');\n    };\n    ButtonRadioDirective.decorators = [\n        { type: Directive, args: [{\n                    selector: '[btnRadio]',\n                    providers: [RADIO_CONTROL_VALUE_ACCESSOR$1]\n                },] }\n    ];\n    /** @nocollapse */\n    ButtonRadioDirective.ctorParameters = function () { return [\n        { type: ElementRef },\n        { type: ChangeDetectorRef },\n        { type: ButtonRadioGroupDirective, decorators: [{ type: Optional }] },\n        { type: Renderer2 }\n    ]; };\n    ButtonRadioDirective.propDecorators = {\n        btnRadio: [{ type: Input }],\n        uncheckable: [{ type: Input }],\n        value: [{ type: Input }],\n        disabled: [{ type: Input }],\n        isActive: [{ type: HostBinding, args: ['class.active',] }, { type: HostBinding, args: ['attr.aria-pressed',] }],\n        onClick: [{ type: HostListener, args: ['click',] }]\n    };\n    return ButtonRadioDirective;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nvar ButtonsModule = /** @class */ (function () {\n    function ButtonsModule() {\n    }\n    /**\n     * @return {?}\n     */\n    ButtonsModule.forRoot = /**\n     * @return {?}\n     */\n    function () {\n        return { ngModule: ButtonsModule, providers: [] };\n    };\n    ButtonsModule.decorators = [\n        { type: NgModule, args: [{\n                    declarations: [ButtonCheckboxDirective, ButtonRadioDirective, ButtonRadioGroupDirective],\n                    exports: [ButtonCheckboxDirective, ButtonRadioDirective, ButtonRadioGroupDirective]\n                },] }\n    ];\n    return ButtonsModule;\n}());\n\nexport { ButtonCheckboxDirective, ButtonRadioDirective, ButtonRadioGroupDirective, ButtonsModule, CHECKBOX_CONTROL_VALUE_ACCESSOR as ɵa, RADIO_CONTROL_VALUE_ACCESSOR as ɵb, RADIO_CONTROL_VALUE_ACCESSOR$1 as ɵc };\n//# sourceMappingURL=ngx-bootstrap-buttons.js.map\n"],"sourceRoot":"webpack:///"}