{"version":3,"sources":["./node_modules/ngx-bootstrap/buttons/fesm5/ngx-bootstrap-buttons.js","./src/app/dashboard/components/dashboard.component.html","./src/app/dashboard/components/widgets/card-progressbar.component.html","./src/app/dashboard/components/widgets/card-progressbar.component.ts","./src/app/dashboard/components/widgets/table.component.html","./src/app/dashboard/components/widgets/table.component.ts","./src/app/dashboard/dashboard-routing.module.ts","./src/app/dashboard/dashboard.module.ts","./src/app/dashboard/shared/widgets.service.ts"],"names":[],"mappings":"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","file":"0.769f9aa39338033d2a1b.js","sourcesContent":["import { forwardRef, Directive, Input, HostBinding, HostListener, ChangeDetectorRef, ElementRef, Optional, Renderer2, NgModule } from '@angular/core';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n// TODO: config: activeClass - Class to apply to the checked buttons\n/** @type {?} */\nvar CHECKBOX_CONTROL_VALUE_ACCESSOR = {\n    provide: NG_VALUE_ACCESSOR,\n    /* tslint:disable-next-line: no-use-before-declare */\n    useExisting: forwardRef((/**\n     * @return {?}\n     */\n    function () { return ButtonCheckboxDirective; })),\n    multi: true\n};\n/**\n * Add checkbox functionality to any element\n */\nvar ButtonCheckboxDirective = /** @class */ (function () {\n    function ButtonCheckboxDirective() {\n        /**\n         * Truthy value, will be set to ngModel\n         */\n        this.btnCheckboxTrue = true;\n        /**\n         * Falsy value, will be set to ngModel\n         */\n        this.btnCheckboxFalse = false;\n        this.state = false;\n        this.onChange = Function.prototype;\n        this.onTouched = Function.prototype;\n    }\n    // view -> model\n    // view -> model\n    /**\n     * @return {?}\n     */\n    ButtonCheckboxDirective.prototype.onClick = \n    // view -> model\n    /**\n     * @return {?}\n     */\n    function () {\n        if (this.isDisabled) {\n            return;\n        }\n        this.toggle(!this.state);\n        this.onChange(this.value);\n    };\n    /**\n     * @return {?}\n     */\n    ButtonCheckboxDirective.prototype.ngOnInit = /**\n     * @return {?}\n     */\n    function () {\n        this.toggle(this.trueValue === this.value);\n    };\n    Object.defineProperty(ButtonCheckboxDirective.prototype, \"trueValue\", {\n        get: /**\n         * @protected\n         * @return {?}\n         */\n        function () {\n            return typeof this.btnCheckboxTrue !== 'undefined'\n                ? this.btnCheckboxTrue\n                : true;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ButtonCheckboxDirective.prototype, \"falseValue\", {\n        get: /**\n         * @protected\n         * @return {?}\n         */\n        function () {\n            return typeof this.btnCheckboxFalse !== 'undefined'\n                ? this.btnCheckboxFalse\n                : false;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @param {?} state\n     * @return {?}\n     */\n    ButtonCheckboxDirective.prototype.toggle = /**\n     * @param {?} state\n     * @return {?}\n     */\n    function (state) {\n        this.state = state;\n        this.value = this.state ? this.trueValue : this.falseValue;\n    };\n    // ControlValueAccessor\n    // model -> view\n    // ControlValueAccessor\n    // model -> view\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    ButtonCheckboxDirective.prototype.writeValue = \n    // ControlValueAccessor\n    // model -> view\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    function (value) {\n        this.state = this.trueValue === value;\n        this.value = value ? this.trueValue : this.falseValue;\n    };\n    /**\n     * @param {?} isDisabled\n     * @return {?}\n     */\n    ButtonCheckboxDirective.prototype.setDisabledState = /**\n     * @param {?} isDisabled\n     * @return {?}\n     */\n    function (isDisabled) {\n        this.isDisabled = isDisabled;\n    };\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    ButtonCheckboxDirective.prototype.registerOnChange = /**\n     * @param {?} fn\n     * @return {?}\n     */\n    function (fn) {\n        this.onChange = fn;\n    };\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    ButtonCheckboxDirective.prototype.registerOnTouched = /**\n     * @param {?} fn\n     * @return {?}\n     */\n    function (fn) {\n        this.onTouched = fn;\n    };\n    ButtonCheckboxDirective.decorators = [\n        { type: Directive, args: [{\n                    selector: '[btnCheckbox]',\n                    providers: [CHECKBOX_CONTROL_VALUE_ACCESSOR]\n                },] }\n    ];\n    ButtonCheckboxDirective.propDecorators = {\n        btnCheckboxTrue: [{ type: Input }],\n        btnCheckboxFalse: [{ type: Input }],\n        state: [{ type: HostBinding, args: ['class.active',] }, { type: HostBinding, args: ['attr.aria-pressed',] }],\n        onClick: [{ type: HostListener, args: ['click',] }]\n    };\n    return ButtonCheckboxDirective;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nvar RADIO_CONTROL_VALUE_ACCESSOR = {\n    provide: NG_VALUE_ACCESSOR,\n    /* tslint:disable-next-line: no-use-before-declare */\n    useExisting: forwardRef((/**\n     * @return {?}\n     */\n    function () { return ButtonRadioGroupDirective; })),\n    multi: true\n};\n/**\n * A group of radio buttons.\n * A value of a selected button is bound to a variable specified via ngModel.\n */\nvar ButtonRadioGroupDirective = /** @class */ (function () {\n    function ButtonRadioGroupDirective(cdr) {\n        this.cdr = cdr;\n        this.onChange = Function.prototype;\n        this.onTouched = Function.prototype;\n    }\n    Object.defineProperty(ButtonRadioGroupDirective.prototype, \"value\", {\n        get: /**\n         * @return {?}\n         */\n        function () {\n            return this._value;\n        },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */\n        function (value) {\n            this._value = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    ButtonRadioGroupDirective.prototype.writeValue = /**\n     * @param {?} value\n     * @return {?}\n     */\n    function (value) {\n        this._value = value;\n        this.cdr.markForCheck();\n    };\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    ButtonRadioGroupDirective.prototype.registerOnChange = /**\n     * @param {?} fn\n     * @return {?}\n     */\n    function (fn) {\n        this.onChange = fn;\n    };\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    ButtonRadioGroupDirective.prototype.registerOnTouched = /**\n     * @param {?} fn\n     * @return {?}\n     */\n    function (fn) {\n        this.onTouched = fn;\n    };\n    ButtonRadioGroupDirective.decorators = [\n        { type: Directive, args: [{\n                    selector: '[btnRadioGroup]',\n                    providers: [RADIO_CONTROL_VALUE_ACCESSOR]\n                },] }\n    ];\n    /** @nocollapse */\n    ButtonRadioGroupDirective.ctorParameters = function () { return [\n        { type: ChangeDetectorRef }\n    ]; };\n    return ButtonRadioGroupDirective;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nvar RADIO_CONTROL_VALUE_ACCESSOR$1 = {\n    provide: NG_VALUE_ACCESSOR,\n    /* tslint:disable-next-line: no-use-before-declare */\n    useExisting: forwardRef((/**\n     * @return {?}\n     */\n    function () { return ButtonRadioDirective; })),\n    multi: true\n};\n/**\n * Create radio buttons or groups of buttons.\n * A value of a selected button is bound to a variable specified via ngModel.\n */\nvar ButtonRadioDirective = /** @class */ (function () {\n    function ButtonRadioDirective(el, cdr, group, renderer) {\n        this.el = el;\n        this.cdr = cdr;\n        this.group = group;\n        this.renderer = renderer;\n        this.onChange = Function.prototype;\n        this.onTouched = Function.prototype;\n    }\n    Object.defineProperty(ButtonRadioDirective.prototype, \"value\", {\n        /** Current value of radio component or group */\n        get: /**\n         * Current value of radio component or group\n         * @return {?}\n         */\n        function () {\n            return this.group ? this.group.value : this._value;\n        },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */\n        function (value) {\n            if (this.group) {\n                this.group.value = value;\n                return;\n            }\n            this._value = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ButtonRadioDirective.prototype, \"disabled\", {\n        /** If `true` — radio button is disabled */\n        get: /**\n         * If `true` — radio button is disabled\n         * @return {?}\n         */\n        function () {\n            return this._disabled;\n        },\n        set: /**\n         * @param {?} disabled\n         * @return {?}\n         */\n        function (disabled) {\n            this._disabled = disabled;\n            this.setDisabledState(disabled);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ButtonRadioDirective.prototype, \"isActive\", {\n        get: /**\n         * @return {?}\n         */\n        function () {\n            return this.btnRadio === this.value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @return {?}\n     */\n    ButtonRadioDirective.prototype.onClick = /**\n     * @return {?}\n     */\n    function () {\n        if (this.el.nativeElement.attributes.disabled || !this.uncheckable && this.btnRadio === this.value) {\n            return;\n        }\n        this.value = this.uncheckable && this.btnRadio === this.value ? undefined : this.btnRadio;\n        this._onChange(this.value);\n    };\n    /**\n     * @return {?}\n     */\n    ButtonRadioDirective.prototype.ngOnInit = /**\n     * @return {?}\n     */\n    function () {\n        this.uncheckable = typeof this.uncheckable !== 'undefined';\n    };\n    /**\n     * @return {?}\n     */\n    ButtonRadioDirective.prototype.onBlur = /**\n     * @return {?}\n     */\n    function () {\n        this.onTouched();\n    };\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    ButtonRadioDirective.prototype._onChange = /**\n     * @param {?} value\n     * @return {?}\n     */\n    function (value) {\n        if (this.group) {\n            this.group.onTouched();\n            this.group.onChange(value);\n            return;\n        }\n        this.onTouched();\n        this.onChange(value);\n    };\n    // ControlValueAccessor\n    // model -> view\n    // ControlValueAccessor\n    // model -> view\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    ButtonRadioDirective.prototype.writeValue = \n    // ControlValueAccessor\n    // model -> view\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    function (value) {\n        this.value = value;\n        this.cdr.markForCheck();\n    };\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    ButtonRadioDirective.prototype.registerOnChange = /**\n     * @param {?} fn\n     * @return {?}\n     */\n    function (fn) {\n        this.onChange = fn;\n    };\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    ButtonRadioDirective.prototype.registerOnTouched = /**\n     * @param {?} fn\n     * @return {?}\n     */\n    function (fn) {\n        this.onTouched = fn;\n    };\n    /**\n     * @param {?} disabled\n     * @return {?}\n     */\n    ButtonRadioDirective.prototype.setDisabledState = /**\n     * @param {?} disabled\n     * @return {?}\n     */\n    function (disabled) {\n        if (disabled) {\n            this.renderer.setAttribute(this.el.nativeElement, 'disabled', 'disabled');\n            return;\n        }\n        this.renderer.removeAttribute(this.el.nativeElement, 'disabled');\n    };\n    ButtonRadioDirective.decorators = [\n        { type: Directive, args: [{\n                    selector: '[btnRadio]',\n                    providers: [RADIO_CONTROL_VALUE_ACCESSOR$1]\n                },] }\n    ];\n    /** @nocollapse */\n    ButtonRadioDirective.ctorParameters = function () { return [\n        { type: ElementRef },\n        { type: ChangeDetectorRef },\n        { type: ButtonRadioGroupDirective, decorators: [{ type: Optional }] },\n        { type: Renderer2 }\n    ]; };\n    ButtonRadioDirective.propDecorators = {\n        btnRadio: [{ type: Input }],\n        uncheckable: [{ type: Input }],\n        value: [{ type: Input }],\n        disabled: [{ type: Input }],\n        isActive: [{ type: HostBinding, args: ['class.active',] }, { type: HostBinding, args: ['attr.aria-pressed',] }],\n        onClick: [{ type: HostListener, args: ['click',] }]\n    };\n    return ButtonRadioDirective;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nvar ButtonsModule = /** @class */ (function () {\n    function ButtonsModule() {\n    }\n    /**\n     * @return {?}\n     */\n    ButtonsModule.forRoot = /**\n     * @return {?}\n     */\n    function () {\n        return { ngModule: ButtonsModule, providers: [] };\n    };\n    ButtonsModule.decorators = [\n        { type: NgModule, args: [{\n                    declarations: [ButtonCheckboxDirective, ButtonRadioDirective, ButtonRadioGroupDirective],\n                    exports: [ButtonCheckboxDirective, ButtonRadioDirective, ButtonRadioGroupDirective]\n                },] }\n    ];\n    return ButtonsModule;\n}());\n\nexport { ButtonCheckboxDirective, ButtonRadioDirective, ButtonRadioGroupDirective, ButtonsModule, CHECKBOX_CONTROL_VALUE_ACCESSOR as ɵa, RADIO_CONTROL_VALUE_ACCESSOR as ɵb, RADIO_CONTROL_VALUE_ACCESSOR$1 as ɵc };\n//# sourceMappingURL=ngx-bootstrap-buttons.js.map\n","<div class=\"animated fadeIn\">\n  <div class=\"row\">\n    <div *ngFor=\"let widget of widgets\" [ngClass]=\"{'col-sm-6 col-lg-3': widgetsService.isCard(widget.type), 'col-sm-12': !widgetsService.isCard(widget.type)}\"\n         [ngSwitch]=\"widget.type\">\n      <div class=\"card\" *ngSwitchCase=\"'card-progressbar'\">\n        <app-card-progressbar-widget [widget]=\"widget\"></app-card-progressbar-widget>\n      </div>\n      <div class=\"card\" *ngSwitchCase=\"'table'\">\n        <app-table-widget [widget]=\"widget\"></app-table-widget>\n      </div>\n    </div>\n  </div>\n</div>\n","<div class=\"card-body\" [style.color]=\"widget.color\"\n     [style.background]=\"widgetsService.getCardBgColor(widget)\" [style.border-color]=\"widget.backgroundColor\">\n  <div class=\"text-value-lg\">{{ widget.value }}</div>\n  <div>{{ widget.text | transloco }}</div>\n  <div class=\"progress progress-xs my-2\">\n    <div class=\"progress-bar\" role=\"progressbar\" [style.width]=\"widget.progressbarPercent + '%'\"\n         [attr.aria-valuenow]=\"widget.progressbarPercent\" aria-valuemin=\"0\" aria-valuemax=\"100\"\n         [style.background]=\"widgetsService.getCardProgressbarColor(widget)\"\n         [style.border-color]=\"widget.progressbarBackgroundColor\">\n    </div>\n  </div>\n  <small [style.color]=\"widget.helpTextColor\">{{ widget.helpText | transloco }}</small>\n</div>\n","import { Component, Input } from '@angular/core';\nimport { CardWidget } from '../../shared/widgets/_card';\nimport { WidgetsService } from '../../shared/widgets.service';\n\n@Component({\n  templateUrl: 'card-progressbar.component.html',\n  selector: 'app-card-progressbar-widget',\n  providers: [WidgetsService]\n})\nexport class CardProgressbarComponent {\n\n  @Input() widget: CardWidget;\n\n  constructor(public widgetsService: WidgetsService) {}\n}\n","<div class=\"card-header\">{{ widget.title | transloco }}</div>\n<div class=\"card-body\">\n  <table class=\"table table-responsive-sm\">\n    <thead>\n    <tr>\n      <th *ngFor=\"let header of widget.headers\">{{ header | transloco }}</th>\n    </tr>\n    </thead>\n    <tbody>\n    <tr *ngFor=\"let row of widget.data\">\n      <td *ngFor=\"let td of row\" [innerHTML]=\"td\" routeTransformer></td>\n    </tr>\n    </tbody>\n  </table>\n</div>\n","import { Component, Input } from '@angular/core';\nimport { TableWidget } from '../../shared/widgets/_table';\nimport { WidgetsService } from '../../shared/widgets.service';\n\n@Component({\n  templateUrl: 'table.component.html',\n  selector: 'app-table-widget',\n  providers: [WidgetsService]\n})\nexport class TableComponent {\n\n  @Input() widget: TableWidget;\n\n  constructor(public widgetsService: WidgetsService) {}\n}\n","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { DashboardComponent } from './components/dashboard.component';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: DashboardComponent\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class DashboardRoutingModule {}\n","import { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { ChartsModule } from 'ng2-charts';\nimport { BsDropdownModule } from 'ngx-bootstrap/dropdown';\nimport { ButtonsModule } from 'ngx-bootstrap/buttons';\nimport { DirectivesModule } from \"../core/directives/directives.module\";\n\nimport { DashboardComponent } from './components/dashboard.component';\nimport { CardProgressbarComponent } from './components/widgets/card-progressbar.component';\nimport { TableComponent } from './components/widgets/table.component';\nimport { DashboardRoutingModule } from './dashboard-routing.module';\nimport { CommonModule } from '@angular/common';\nimport { TranslocoModule } from '@ngneat/transloco';\n\n@NgModule({\n  imports: [\n    FormsModule,\n    DashboardRoutingModule,\n    ChartsModule,\n    BsDropdownModule,\n    ButtonsModule.forRoot(),\n    CommonModule,\n    TranslocoModule,\n    DirectivesModule\n  ],\n  declarations: [ DashboardComponent, CardProgressbarComponent, TableComponent ]\n})\nexport class DashboardModule { }\n","import { Injectable } from '@angular/core';\nimport { CardWidget } from './widgets/_card';\n\n@Injectable()\nexport class WidgetsService\n{\n  public isCard(type: string)\n  {\n    if(type === 'card-progressbar') {\n      return true\n    }\n    return false\n  }\n\n  public getCardBgColor(widget: CardWidget): string\n  {\n    if(widget.backgroundGradient) {\n      return widget.backgroundGradient\n    }\n     return widget.backgroundColor\n  }\n\n  public getCardProgressbarColor(widget: CardWidget): string\n  {\n    if(widget.progressbarBackgroundGradient) {\n      return widget.progressbarBackgroundGradient\n    }\n    return widget.progressbarBackgroundColor;\n  }\n}\n"],"sourceRoot":"webpack:///"}